openapi: "3.0.0"
info:
  version: "1.0"
  title: lamApp API
  description: lamiApp OpenAPI
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Alfin7007/lamiApp/1.0
  - description: Base URL
    url: https://lamiapp.site
tags:
  - name: Login
    description: Authentication
  - name: Register
    description: Register
  - name: User
    description: User data management
  - name: Submissions
    description: Pengajuan UMKM dan Event for admin only
  - name: Culture
    description: Budaya
  - name: Events
    description: Event
  - name: Participations
    description: Participation
  - name: Comments
    description: Comment
  - name: Products
    description: Product for UMKM only
  - name: Carts
    description: Carts
  - name: Orders
    description: Orders

paths:
  #############################
  #           LOGIN           #
  #############################
  /login:
    post:
      tags:
        - Login
      summary: Login user
      description: login user description
      requestBody:
        $ref: "#/components/requestBodies/loginRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/loginResponseSuccess"
        "400":
          $ref: "#/components/responses/loginResponseFailed"
  #############################
  #         REGISTER          #
  #############################
  /register:
    post:
      tags:
        - Register
      summary: Register user
      description: register user description
      requestBody:
        $ref: "#/components/requestBodies/registerRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/registerResponseSuccess"
        "400":
          $ref: "#/components/responses/registerResponseFailed"
  ###############################
  #            USER             #
  ###############################
  /users:
    get:
      tags:
        - User
      summary: profile user
      description: Profile user description
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getUserResponseSuccess"
        "400":
          $ref: "#/components/responses/getUserResponseFailed"
    put:
      tags:
        - User
      summary: update user
      description: Updated user description
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestUpdateUser"
      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          $ref: "#/components/responses/updateUserResponseFailed"

    delete:
      tags:
        - User
      summary: delete user
      description: Delete user description
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/deleteResponseSuccess"
        "400":
          $ref: "#/components/responses/deleteResponseFailed"
  /users/stores:
    post:
      tags:
        - User
      summary: Upgrade account
      description: description upgrade account
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestUserUMKM"

      responses:
        "200":
          $ref: "#/components/responses/submitResponseSuccess"
        "400":
          $ref: "#/components/responses/submitStoreResponseFailed"
  ###############################
  #          SUBMISSION         #
  ###############################
  /stores/submissions:
    get:
      tags:
        - Submissions
      summary: All apply UMKM
      description: mengambil semua apply UMKM
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getStoreSubmissionResponseSuccess"
        "400":
          $ref: "#/components/responses/getDataResponseFailed"

  /stores/submissions/{userID}:
    put:
      tags:
        - Submissions
      summary: Update apply UMKM
      description: memperbarui apply UMKM
      parameters:
        - $ref: "#/components/parameters/userID"
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateStatusRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          $ref: "#/components/responses/updateStatusResponseFailed"

  /events/submissions:
    get:
      tags:
        - Submissions
      summary: All apply events
      description: mengambil semua apply events
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getEventSubmissionResponseSuccess"
        "400":
          $ref: "#/components/responses/getDataResponseFailed"

  /events/submissions/{eventID}:
    get:
      tags:
        - Submissions
      summary: Get apply events
      description: description get detail pengajuan event
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/eventID"
      responses:
        "200":
          $ref: "#/components/responses/getDetailEventSubmissionResponseSuccess"
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
    put:
      tags:
        - Submissions
      summary: Put apply events
      description: description put detail pengajuan event
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/eventID"
      requestBody:
        $ref: "#/components/requestBodies/updateStatusRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          $ref: "#/components/responses/updateStatusResponseFailed"

  ############################
  #         CULTURE          #
  ############################
  /cultures:
    post:
      tags:
        - Culture
      summary: Create culture for admin only
      description: description create culture
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestCulture"
      responses:
        "201":
          $ref: "#/components/responses/createDataResponseSuccess"
        "400":
          $ref: "#/components/responses/createCultureResponseFailed"
    get:
      tags:
        - Culture
      summary: Culture List
      description: Get All Culture
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/city"
      responses:
        "200":
          description: get all list culture success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get all list culture
                    totalPage: 1
                    data:
                      [
                        {
                          cultureID: 34,
                          image: url.example.image.culture.com,
                          cultureName: Reog,
                          city: Ponorogo,
                        },
                      ]
        "400":
          $ref: "#/components/responses/getDataResponseFailed"

  /cultures/{cultureID}:
    get:
      tags:
        - Culture
      summary: Culture detail
      description: Get culture by idCulture
      parameters:
        - $ref: "#/components/parameters/cultureID"
      responses:
        "200":
          description: get culture by idCulture success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get culture by idCulture
                    data:
                      cultureID: 34
                      image: url.example.image.culture.com
                      cultureName: Reog
                      city: Ponorogo
                      details: ini_detail_culture_reog
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
    put:
      tags:
        - Culture
      summary: Culture Edit for admin only
      description: Put culture by idCulture
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/cultureID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestCulture"
      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          $ref: "#/components/responses/createCultureResponseFailed"
    delete:
      tags:
        - Culture
      summary: Delete Culture for admin only
      description: Delete culture by idCulture
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/cultureID"
      responses:
        "200":
          $ref: "#/components/responses/deleteResponseSuccess"
        "400":
          $ref: "#/components/responses/deleteResponseFailed"
  /cultures/reports/{cultureID}:
    post:
      tags:
        - Culture
      summary: Report Culture
      description: Post cultures report
      parameters:
        - $ref: "#/components/parameters/cultureID"
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestReportCulture"
            example:
              message: info budaya salah
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestReportCulture"
      responses:
        "201":
          description: create culture reports success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to send reports
        "400":
          description: failed create culture reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    code: 400
                    message: Failed to send reports
    get:
      tags:
        - Culture
      summary: Culture report list for admin only
      description: Get culture_reports by idCulture
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/cultureID"
      responses:
        "200":
          description: get culture_reports by idCulture success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get culture report by idCulture
                    data:
                      - message: reports_angklung
        "400":
          $ref: "#/components/responses/getDataResponseFailed"

  ###########################
  #         EVENTS          #
  ###########################
  /events:
    post:
      tags:
        - Events
      summary: Create Event
      description: Post Events
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestEvent"
      responses:
        "201":
          $ref: "#/components/responses/createDataResponseSuccess"
        "400":
          $ref: "#/components/responses/createEventResponseFailed"
    get:
      tags:
        - Events
      summary: Event List
      description: Get all events list
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/city"
      responses:
        "200":
          description: get all event list success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get all event list
                    currentTime: 2022-07-05T09:04
                    totalPage: 1
                    data:
                      - eventID: 3
                        image: image.url.com
                        eventName: Wayang Kulit
                        price: 21000
                        date: 2022-07-05T09:04
                        city: Semarang
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  /events/{eventID}:
    get:
      tags:
        - Events
      summary: detail event
      description: get events by idUser
      parameters:
        - $ref: "#/components/parameters/eventID"
      responses:
        "200":
          description: get events by idUser Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get all your events
                    currentTime: 2022-07-05T09:04
                    data:
                      eventID: 2
                      image: url.image.example.com
                      name: Wayang Kulit
                      hostedBy: Pablo
                      date: 2022-07-05T09:04
                      city: Jakarta
                      location: 1.2,2
                      details: ini_detail_myevent
                      participants:
                        - name: Andi,
                          image: url.image.example.com
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
    delete:
      tags:
        - Events
      summary: delete Event
      description: delete my event by idEvent
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/eventID"

      responses:
        "200":
          $ref: "#/components/responses/deleteResponseSuccess"
        "400":
          $ref: "#/components/responses/deleteResponseFailed"
  /users/events:
    get:
      tags:
        - Events
      summary: my Event
      description: get events by idEvent
      security:
        - JWTAuth: []
      responses:
        "200":
          description: get events by idEvent success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get all event list
                    currentTime: 2022-07-05T09:04
                    totalPage: 1
                    data:
                      - eventID: 3
                        image: image.url.com
                        eventName: Wayang Kulit
                        price: 21000
                        date: 2022-07-05T09:04
                        city: Semarang
                        status: waiting
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  ##################################
  #         PARTICIPATION          #
  ##################################
  /events/participations:
    post:
      tags:
        - Participations
      summary: Join Event
      description: post events/participation
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestJoin"
            example:
              eventID: 23
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestJoin"
      responses:
        "201":
          description: create events/participation success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 201
                    message: Success insert events participants
        "400":
          $ref: "#/components/responses/createParticipationResponseFailed"
    get:
      tags:
        - Participations
      summary: Joined Event
      description: Get events/participation
      security:
        - JWTAuth: []
      responses:
        "200":
          description: get events/participation success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success get your all joined events
                    currentTime: 2022-07-05T09:04
                    data:
                      - eventID: 24
                        participantID: 2
                        image: url.image.event.com
                        name: Tari Jaipong
                        hostedBy: Michael
                        date: 2022-07-05T09:04
                        location: 1, 1
                        city: Semarang
                        details: ini_detail_event_by_idEvent
                        price: 20000
        "400":
          $ref: "#/components/responses/getDataResponseFailed"

  ############################
  #         COMMENT          #
  ############################
  /events/comments:
    post:
      tags:
        - Comments
      summary: Detail Event
      description: post events/comments
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requesCreateComment"
            example:
              eventID: 23
              comment: bla bla bla
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requesCreateComment"
      responses:
        "201":
          description: create events/comments success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 201
                    message: Success insert your comments
        "400":
          $ref: "#/components/responses/createCommentResponseFailed"
  /events/comments/(eventID):
    get:
      tags:
        - Comments
      summary: get comments
      parameters:
        - $ref: "#/components/parameters/eventID"
      description: Get event/comments/id_event (get all event by id_event)
      responses:
        "200":
          description: get event/comments/id_event success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get all your event comments
                    data:
                      - commentID: 12
                        name: Angga
                        image: https://soundfest.site/image/user.jpg
                        comment: Ini spesifik alamat eventnya dimana gimana ya kak?
                        updated_at: 2022-07-05T17:43:30.097Z
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  ############################
  #         PRODUCT          #
  ############################
  /products:
    post:
      tags:
        - Products
      summary: Add product
      description: Post product
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestProduct"
      responses:
        "201":
          $ref: "#/components/responses/createDataResponseSuccess"
        "400":
          $ref: "#/components/responses/createProductResponseFailed"
    get:
      tags:
        - Products
      summary: Product List
      description: Get All Product List
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/city"
      responses:
        "200":
          description: get all product list success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success get all product list
                    totalPage: 3
                    data:
                      - productID: 11
                        image: url.image.com
                        productName: Jaket khas Bandung
                        price: 280000
                        city: Bandung

        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  /products/{productID}:
    get:
      tags:
        - Products
      summary: detail Product
      description: get product by idProduct
      parameters:
        - $ref: "#/components/parameters/productID"
      responses:
        "200":
          description: get product by idProduct success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success get product by idProduct
                    data:
                      productID: 11
                      image: url.image.com
                      productName: Jaket khas Bandung
                      storeName: Jaketku
                      price: 280000
                      city: Bandung
                      meanRating: 4.8
                      details: ini_detail_edit_product
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
    put:
      tags:
        - Products
      summary: Edit product
      description: put product by idProduct
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/productID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestUpdateProduct"

      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          $ref: "#/components/responses/createProductResponseFailed"
    delete:
      tags:
        - Products
      summary: delete Product
      description: delete product by idProduct
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/productID"
      responses:
        "200":
          $ref: "#/components/responses/deleteResponseSuccess"
        "400":
          $ref: "#/components/responses/deleteResponseFailed"
  /users/products:
    get:
      tags:
        - Products
      summary: My Product
      description: Get My Product
      security:
        - JWTAuth: []
      responses:
        "200":
          description: get my product success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success get all product list
                    totalPage: 3
                    data:
                      - productID: 11
                        image: url.image.com
                        productName: Jaket khas Bandung
                        price: 280000
                        city: Bandung
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  /products/ratings/{productID}:
    post:
      tags:
        - Products
      summary: Post product ratings
      description: Post product_ratings (give rating by productID)
      parameters:
        - $ref: "#/components/parameters/productID"
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestPostReview"
            example:
              review: ini_review
              rating: 4
          multipart/form-dat:
            schema:
              $ref: "#/components/schemas/requestPostReview"
      responses:
        "201":
          description: product ratings success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 201
                    message: Success to insert product ratings
        "400":
          description: failed product ratings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    code: 400
                    message: Failed to insert product ratings
    get:
      tags:
        - Products
      summary: Get product ratings
      description: Get product_ratings (get all event by productID)
      parameters:
        - $ref: "#/components/parameters/productID"
      responses:
        "200":
          description: get product_ratings success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get product_ratings
                    data:
                      - ratingID: 1
                        image: url.image.example.com
                        name: userA
                        rating: 4
                        review: bla bla bla
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  #########################
  #         CART          #
  #########################
  /carts:
    post:
      tags:
        - Carts
      summary: Add Cart
      description: Post Cart
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestaddCarts"
            example:
              productID: 23
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestaddCarts"
      responses:
        "200":
          description: add cart success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success add to cart
        "400":
          description: failed add cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    code: 400
                    message: Failed add to cart
    get:
      tags:
        - Carts
      summary: Get Cart
      description: Get Cart
      security:
        - JWTAuth: []
      responses:
        "200":
          description: get your cart success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get your cart
                    data:
                      - cartID: 2
                        image: url.image.com
                        name: Jaket khas Bandung
                        price: 280000
                        qty: 3
        "400":
          $ref: "#/components/responses/getDataResponseFailed"
  /carts/{cartID}:
    put:
      tags:
        - Carts
      summary: Put Cart
      description: Update cart by idCart
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/cartID"
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: "#/components/schemas/requestUpdateCart"
            example:
              qty: 2
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestUpdateCart"
      responses:
        "200":
          $ref: "#/components/responses/updateResponseSuccess"
        "400":
          description: failed update vart by idCart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    code: 400
                    message: Failed to update your cart
    delete:
      tags:
        - Carts
      summary: Delete Carts
      description: delete cart by idCart
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/cartID"
      responses:
        "200":
          $ref: "#/components/responses/deleteResponseSuccess"
        "400":
          $ref: "#/components/responses/deleteResponseFailed"
  ##########################
  #         ORDER          #
  ##########################
  /orders:
    post:
      tags:
        - Orders
      summary: Add Order
      description: post order
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestOrders"
            example:
              cartid: [1, 2]
              address:
                { receiver: "joko", phone: "082302xxxx", address: "malang dkk" }
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/requestOrders"
      responses:
        "200":
          description: add order success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to add your order
        "400":
          description: failed add order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    code: 400
                    message: Failed to add your order
    get:
      tags:
        - Orders
      summary: History Order
      description: get history order
      security:
        - JWTAuth: []
      responses:
        "200":
          description: get your history order success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseGetHistoryOrders"
              examples:
                responseData:
                  description: response success
                  value:
                    code: 200
                    message: Success to get your history order
                    data:
                      - receiver: namaku
                        address: Jl. Jeruk no.189 - Kota Bandung
                        date: 2022-07-05T09:04
                        price: 90000
                        status: selesai
                        product:
                          - productID: 7
                            name: Batik Semarang
                            image: ini_image_file*
                            qty: 1

        "400":
          $ref: "#/components/responses/getDataResponseFailed"

#############################
#        COMPONENTS         #
#############################

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

  #############################
  #          SCHEMAS          #
  #############################
  schemas:
    requestLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
    responseLoginSuccess:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
        data:
          type: object
    failedResponseLogin:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
    requestRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
    responseRegisterSuccess:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
    failedResponseRegister:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
    responseWithData:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        currentTime:
          type: string
        data:
          type: object
    requestUpdateUser:
      type: object
      properties:
        image:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
        name:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
    failedResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    responseWithNoData:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    requestUserUMKM:
      type: object
      required:
        - storeName
        - owner
        - phone
        - address
        - document
      properties:
        storeName:
          type: string
          minLength: 1
        owner:
          type: string
          minLength: 1
        phone:
          type: string
          minLength: 1
        address:
          type: string
          minLength: 1
        document:
          type: string
          format: binary
          description: "allowed file extension: pdf && size <= 5050000 byte"
    requestUpdateApply:
      type: object
      properties:
        status:
          type: string
          minLength: 1
    requestCulture:
      type: object
      required:
        - name
        - image
        - city
        - details
      properties:
        name:
          type: string
          minLength: 1
        image:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
        city:
          type: string
          minLength: 1
        details:
          type: string
          minLength: 1
    requestReportCulture:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          minLength: 1
    requestEvent:
      type: object
      required:
        - image
        - document
        - name
        - hostedBy
        - phone
        - startDate
        - city
        - location
        - details
        - price
        - endDate
      properties:
        image:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
        document:
          type: string
          format: binary
          description: "allowed file extension: pdf && size <= 5050000 byte"
        name:
          type: string
          minLength: 1
        hostedBy:
          type: string
          minLength: 1
        phone:
          type: string
          minLength: 1
        startDate:
          type: string
          minLength: 1
        endDate:
          type: string
          minLength: 1
        city:
          type: string
          minLength: 1
        location:
          type: string
          minLength: 1
        details:
          type: string
          minLength: 1
        price:
          type: number
          minLength: 1
    requestJoin:
      type: object
      required:
        - eventID
      properties:
        eventID:
          type: number
    requesCreateComment:
      type: object
      required:
        - eventID
        - comment
      properties:
        eventID:
          type: number
          minLength: 1
        comment:
          type: string
    responseComment:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
    requestProduct:
      type: object
      required:
        - image
        - name
        - city
        - details
        - price
        - stock
      properties:
        image:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
        name:
          type: string
          minLength: 1
        details:
          type: string
          minLength: 1
        price:
          type: number
          minLength: 1
        stock:
          type: number
          minLength: 1
    requestUpdateProduct:
      type: object
      properties:
        image:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
        details:
          type: string
          minLength: 1
        price:
          type: number
          minLength: 1
        stock:
          type: number
          minLength: 1
    requestPostReview:
      type: object
      required:
        - review
        - rating
      properties:
        rating:
          type: number
          minLength: 1
        review:
          type: string
          minLength: 1
    requestaddCarts:
      type: object
      required:
        - productID
      properties:
        productID:
          type: number
    requestUpdateCart:
      type: object
      required:
        - qty
      properties:
        qty:
          type: number
    requestOrderPayments:
      type: object
      properties:
        productID:
          type: number
    requestEventPayments:
      type: object
      properties:
        eventID:
          type: number

    requestOrders:
      type: object
      required:
        - cartID
        - address
      properties:
        cartID:
          type: number
        address:
          type: object
          properties:
            receiver:
              type: string
            phone:
              type: string
            address:
              type: string
    # Get History Orders
    responseGetHistoryOrders:
      type: object
      properties:
        data:
          type: object
        code:
          type: number
        message:
          type: string
    responseNonData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string

  #############################
  #      REQUEST BODIES       #
  #############################
  requestBodies:
    loginRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestLogin"
          examples:
            userData:
              description: data user for login
              value:
                email: user@gmail.com
                password: password123
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestLogin"
    registerRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestRegister"
          examples:
            userData:
              description: data user for register
              value:
                name: Budi Setiawan
                email: budi@gmail.com
                password: inibudi
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestRegister"
    updateStatusRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestUpdateApply"
          example:
            status: decline
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestUpdateApply"
  #############################
  #         RESPONSES         #
  #############################
  responses:
    loginResponseSuccess:
      description: login success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseLoginSuccess"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Login Success
                data:
                  id: 1
                  role: user
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co
    loginResponseFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          example:
            Code: 400
            Message: Email or Password Incorrect
    registerResponseSuccess:
      description: register success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseRegisterSuccess"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Register Success
    registerResponseFailed:
      description: register failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid Email:
              $ref: "#/components/examples/invalidEmail"
            Invalid Password:
              $ref: "#/components/examples/invalidPassword"
            All Data Not Filled:
              $ref: "#/components/examples/allDataNotFilled"
    getUserResponseSuccess:
      description: Get Profile Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            user role:
              description: response user role success
              value:
                code: 200
                message: Success get your data
                data:
                  ID: 1
                  image: URL File
                  name: budi
                  role: user
                  status: waiting
                  email: budi@gmail.com
            umkm role:
              description: response umkm role success
              value:
                code: 200
                message: Success get your data
                data:
                  id: 1
                  image: URL File
                  name: budi
                  role: umkm
                  email: budi@gmail.com
                  storeName: toko budi
                  phone: 82302406752
                  owner: budi subagio
                  city: trenggalek
                  address: jln. trenggalek no.54
                  createdAt: "2022-07-14T12:54:49.844Z"
    getUserResponseFailed:
      description: Failed Get Profile
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponse"
          examples:
            responseData:
              description: response failed
              value:
                code: 400
                message: Failed to get your data
    deleteResponseSuccess:
      description: Delete Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Delete Success
    deleteResponseFailed:
      description: Delete Failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response failed
              value:
                code: 400
                message: Delete Failed
    updateResponseSuccess:
      description: Update Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Updated Success
    updateUserResponseFailed:
      description: Update Failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid Email:
              $ref: "#/components/examples/invalidEmail"
            Invalide Image Extension:
              $ref: "#/components/examples/invalidFileExtension"
            Invalid Image size:
              $ref: "#/components/examples/invalidFileSize"
    submitResponseSuccess:
      description: submit success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Submit success
    submitStoreResponseFailed:
      description: submit Failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Owner:
              $ref: "#/components/examples/invalidName"
            Invalid City:
              $ref: "#/components/examples/invalidCity"
            Invalid Phone:
              $ref: "#/components/examples/invalidPhone"
            Invalid File Size:
              $ref: "#/components/examples/invalidFileSize"
            Invalid File Extension:
              $ref: "#/components/examples/invalidFileExtension"
    getStoreSubmissionResponseSuccess:
      description: get all apply UMKM success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Success to get all apply UMKM
                totalPage: 1
                data:
                  - userID: 1
                    username: budi.setiawan
                    storeName: storeBudi
                    owner: ownerBudi
                    phone: "081234567899"
                    city: malang
                    address: Jalan Apel no.911, Kota Medan
                    document: url.example.document.com
                    status: approve
    getDataResponseFailed:
      description: get data failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response failed
              value:
                code: 400
                message: get data failed
    updateStatusResponseFailed:
      description: failed update status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponse"
          examples:
            responseData:
              description: response failed
              value:
                code: 400
                message: Failed to status
    getEventSubmissionResponseSuccess:
      description: get all apply events success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Success to get all apply events
                totalPage: 1
                data:
                  - eventID: 1
                    nameEvent: Event Budaya Cirebon
                    username: budi.setiawan
                    city: Cirebon
                    date: 2022-07-05T09:04
                    status: waiting
    getDetailEventSubmissionResponseSuccess:
      description: get detail pengajuan events success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: Success to get apply events
                data:
                  {
                    eventID: 1,
                    image: url.image.event.com,
                    document: url.document.event.com,
                    name: Event Budaya Malang,
                    userName: raden.andi,
                    hostedBy: Siti Amaliah,
                    phone: "083289073452",
                    date: 2022-07-05T09:04,
                    city: Malang,
                    status: waiting,
                    location: "1.5, 2",
                    details: Ini details eventnya,
                    price: 90000,
                  }
    createDataResponseSuccess:
      description: create success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response success
              value:
                code: 201
                message: create success
    createCultureResponseFailed:
      description: create failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid City:
              $ref: "#/components/examples/invalidCity"
            Invalid File Size:
              $ref: "#/components/examples/invalidFileSize"
            Invalid File Extension:
              $ref: "#/components/examples/invalidFileExtension"
    createEventResponseFailed:
      description: create failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid City:
              $ref: "#/components/examples/invalidCity"
            Invalid Phone:
              $ref: "#/components/examples/invalidPhone"
            Invalid File Size:
              $ref: "#/components/examples/invalidFileSize"
            Invalid File Extension:
              $ref: "#/components/examples/invalidFileExtension"
    createParticipationResponseFailed:
      description: create failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid Join Date:
              $ref: "#/components/examples/invalidDateJoin"
    createCommentResponseFailed:
      description: create failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              $ref: "#/components/examples/responseFailed"
    createProductResponseFailed:
      description: create failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid File Size:
              $ref: "#/components/examples/invalidFileSize"
            Invalid File Extension:
              $ref: "#/components/examples/invalidFileExtension"
  #############################
  #         EXAMPLES          #
  #############################
  examples:
    responseFailed:
      description: create failed
      value:
        code: 400
        message: create failed
    invalidName:
      description: invalid Name
      value:
        code: 400
        message: invalid name
    invalidEmail:
      description: invalid Email
      value:
        code: 400
        message: invalid email
    invalidPassword:
      description: invalid password
      value:
        code: 400
        message: invalid password
    allDataNotFilled:
      description: all data not filled
      value:
        code: 400
        message: all data must be filled
    invalidFileExtension:
      description: file extension not allow
      value:
        code: 400
        message: file extension invalid
    invalidFileSize:
      description: file size invalid
      value:
        code: 400
        message: file size invalid
    failedGetFile:
      description: failed get file
      value:
        code: 400
        message: failed get file
    invalidCity:
      description: invalid City
      value:
        code: 400
        message: invalid city
    invalidPhone:
      description: invalid Phone
      value:
        code: 400
        message: invalid Phone
    invalidDateJoin:
      description: invalid join date
      value:
        code: 400
        message: invalid join date

  #############################
  #         PARAMETERS        #
  #############################
  parameters:
    page:
      in: query
      name: page
      required: true
      schema:
        type: number
        example: 1
    limit:
      in: query
      name: limit
      required: true
      schema:
        type: number
        example: 12
    name:
      in: query
      name: name
      required: true
      schema:
        type: string
        example: abc dummy
    city:
      in: query
      name: city
      required: true
      schema:
        type: string
        example: malang
    userID:
      in: path
      name: userID
      required: true
      schema:
        type: number
        example: 1
    eventID:
      in: path
      name: eventID
      required: true
      schema:
        type: number
        example: 1
    cultureID:
      in: path
      name: cultureID
      required: true
      schema:
        type: number
        example: 1
    productID:
      in: path
      name: productID
      required: true
      schema:
        type: number
        example: 1
    cartID:
      in: path
      name: cartID
      required: true
      schema:
        type: number
        example: 1
