// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	cultures "lami/app/features/cultures"
	data "lami/app/features/users/data"

	mock "github.com/stretchr/testify/mock"
)

// CultureData is an autogenerated mock type for the Data type
type CultureData struct {
	mock.Mock
}

// AddCultureDataReport provides a mock function with given fields: dataReq
func (_m *CultureData) AddCultureDataReport(dataReq cultures.CoreReport) error {
	ret := _m.Called(dataReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(cultures.CoreReport) error); ok {
		r0 = rf(dataReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDataCulture provides a mock function with given fields: dataReq
func (_m *CultureData) AddDataCulture(dataReq cultures.Core) error {
	ret := _m.Called(dataReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(cultures.Core) error); ok {
		r0 = rf(dataReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDataCulture provides a mock function with given fields: cultureID
func (_m *CultureData) DeleteDataCulture(cultureID int) error {
	ret := _m.Called(cultureID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(cultureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectDataCulture provides a mock function with given fields: limit, offset, name, city
func (_m *CultureData) SelectDataCulture(limit int, offset int, name string, city string) ([]cultures.Core, int64, error) {
	ret := _m.Called(limit, offset, name, city)

	var r0 []cultures.Core
	if rf, ok := ret.Get(0).(func(int, int, string, string) []cultures.Core); ok {
		r0 = rf(limit, offset, name, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cultures.Core)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(limit, offset, name, city)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(limit, offset, name, city)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectDataCultureByCultureID provides a mock function with given fields: cultureID
func (_m *CultureData) SelectDataCultureByCultureID(cultureID int) (cultures.Core, error) {
	ret := _m.Called(cultureID)

	var r0 cultures.Core
	if rf, ok := ret.Get(0).(func(int) cultures.Core); ok {
		r0 = rf(cultureID)
	} else {
		r0 = ret.Get(0).(cultures.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cultureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDataReport provides a mock function with given fields: cultureID
func (_m *CultureData) SelectDataReport(cultureID int) ([]cultures.CoreReport, error) {
	ret := _m.Called(cultureID)

	var r0 []cultures.CoreReport
	if rf, ok := ret.Get(0).(func(int) []cultures.CoreReport); ok {
		r0 = rf(cultureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cultures.CoreReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cultureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUser provides a mock function with given fields: id
func (_m *CultureData) SelectUser(id int) (data.User, error) {
	ret := _m.Called(id)

	var r0 data.User
	if rf, ok := ret.Get(0).(func(int) data.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(data.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataCulture provides a mock function with given fields: dataReq, cultureID
func (_m *CultureData) UpdateDataCulture(dataReq map[string]interface{}, cultureID int) error {
	ret := _m.Called(dataReq, cultureID)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int) error); ok {
		r0 = rf(dataReq, cultureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCultureData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCultureData creates a new instance of CultureData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCultureData(t mockConstructorTestingTNewCultureData) *CultureData {
	mock := &CultureData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
