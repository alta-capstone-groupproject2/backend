// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	cultures "lami/app/features/cultures"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// CultureBussiness is an autogenerated mock type for the Business type
type CultureBussiness struct {
	mock.Mock
}

// AddCulture provides a mock function with given fields: dataReq, fileInfo, fileData
func (_m *CultureBussiness) AddCulture(dataReq cultures.Core, fileInfo *multipart.FileHeader, fileData multipart.File) error {
	ret := _m.Called(dataReq, fileInfo, fileData)

	var r0 error
	if rf, ok := ret.Get(0).(func(cultures.Core, *multipart.FileHeader, multipart.File) error); ok {
		r0 = rf(dataReq, fileInfo, fileData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCultureReport provides a mock function with given fields: dataReq
func (_m *CultureBussiness) AddCultureReport(dataReq cultures.CoreReport) error {
	ret := _m.Called(dataReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(cultures.CoreReport) error); ok {
		r0 = rf(dataReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCulture provides a mock function with given fields: cultureID
func (_m *CultureBussiness) DeleteCulture(cultureID int) error {
	ret := _m.Called(cultureID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(cultureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectCulture provides a mock function with given fields: limit, page
func (_m *CultureBussiness) SelectCulture(limit int, page int) ([]cultures.Core, int64, error) {
	ret := _m.Called(limit, page)

	var r0 []cultures.Core
	if rf, ok := ret.Get(0).(func(int, int) []cultures.Core); ok {
		r0 = rf(limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cultures.Core)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(limit, page)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectCulturebyCultureID provides a mock function with given fields: cultureID
func (_m *CultureBussiness) SelectCulturebyCultureID(cultureID int) (cultures.Core, error) {
	ret := _m.Called(cultureID)

	var r0 cultures.Core
	if rf, ok := ret.Get(0).(func(int) cultures.Core); ok {
		r0 = rf(cultureID)
	} else {
		r0 = ret.Get(0).(cultures.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cultureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectReport provides a mock function with given fields: cultureID
func (_m *CultureBussiness) SelectReport(cultureID int) ([]cultures.CoreReport, error) {
	ret := _m.Called(cultureID)

	var r0 []cultures.CoreReport
	if rf, ok := ret.Get(0).(func(int) []cultures.CoreReport); ok {
		r0 = rf(cultureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cultures.CoreReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cultureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCulture provides a mock function with given fields: dataReq, cultureID, fileInfo, fileData
func (_m *CultureBussiness) UpdateCulture(dataReq cultures.Core, cultureID int, fileInfo *multipart.FileHeader, fileData multipart.File) error {
	ret := _m.Called(dataReq, cultureID, fileInfo, fileData)

	var r0 error
	if rf, ok := ret.Get(0).(func(cultures.Core, int, *multipart.FileHeader, multipart.File) error); ok {
		r0 = rf(dataReq, cultureID, fileInfo, fileData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCultureBussiness interface {
	mock.TestingT
	Cleanup(func())
}

// NewCultureBussiness creates a new instance of CultureBussiness. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCultureBussiness(t mockConstructorTestingTNewCultureBussiness) *CultureBussiness {
	mock := &CultureBussiness{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
